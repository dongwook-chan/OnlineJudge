#include <iostream>
#include <algorithm>

//#define DEBUG

using namespace std;

struct fish {
    int x;
    int y;
    int d;
};

// ↗, ↑, ↖, ←, ↙, ↓, ↘, →, 
int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy[] = {1, 0, -1, -1, -1, 0, 1, 1};

int ans;

#ifdef DEBUG
void bf(fish fishes[], int space[][4], int sum, int depth) {
    cout << "depth: " << depth << endl;
    if (depth == 16) return;
#else
void bf(fish fishes[], int space[][4], int sum) {
#endif
    // 이후 물고기가 이동한다. 물고기는 번호가 작은 물고기부터 순서대로 이동한다. 물고기는 한 칸을 이동할 수 있고, 이동할 수 있는 칸은 빈 칸과 다른 물고기가 있는 칸, 이동할 수 없는 칸은 상어가 있거나, 공간의 경계를 넘는 칸이다. 각 물고기는 방향이 이동할 수 있는 칸을 향할 때까지 방향을 45도 반시계 회전시킨다. 만약, 이동할 수 있는 칸이 없으면 이동을 하지 않는다. 그 외의 경우에는 그 칸으로 이동을 한다. 물고기가 다른 물고기가 있는 칸으로 이동할 때는 서로의 위치를 바꾸는 방식으로 이동한다.
    for (int n = 1; n <= 16; ++n) {
        int x = fishes[n].x;
        int y = fishes[n].y;
        int d = fishes[n].d;

        if (d == -1) continue;

        for (int dd = 0; dd < 8; ++dd) {
            int nd = (d + dd) % 8;
            int nx = x + dx[nd];
            int ny = y + dy[nd];
            int nn;

            if (!(0 <= nx && nx < 4 && 0 <= ny && ny < 4)) continue;    // 틀림
            if ((nn = space[nx][ny]) == 0) continue;                    // 틀림    

            // swap fishes
            fishes[n].x = nx;
            fishes[n].y = ny;
            if (nn != -1) {
                fishes[nn].x = x;
                fishes[nn].y = y;
            }

            // swap space
            swap(space[x][y], space[nx][ny]);
            break;
        }
#ifdef DEBUG
        cout << "fish" << " " << n << " moved." << endl; 
        for (int x = 0; x < 4; ++ x) {
            for (int y = 0; y < 4; ++ y) {
                cout << space[x][y] << '\t';
            }
            cout << endl;
        }
#endif
    }
    //물고기의 이동이 모두 끝나면 상어가 이동한다. 상어는 방향에 있는 칸으로 이동할 수 있는데, 한 번에 여러 개의 칸을 이동할 수 있다. 상어가 물고기가 있는 칸으로 이동했다면, 그 칸에 있는 물고기를 먹고, 그 물고기의 방향을 가지게 된다. 이동하는 중에 지나가는 칸에 있는 물고기는 먹지 않는다. 물고기가 없는 칸으로는 이동할 수 없다. 상어가 이동할 수 있는 칸이 없으면 공간에서 벗어나 집으로 간다. 상어가 이동한 후에는 다시 물고기가 이동하며, 이후 이 과정이 계속해서 반복된다.
    int x = fishes[0].x;
    int y = fishes[0].y;
    int d = fishes[0].d;
    int ctr = 0;
    for (int m = 1; m <= 3; ++m) {
        int nx = x + dx[d] * m;
        int ny = y + dy[d] * m;
        int nn;

        if (!(0 <= nx && nx < 4 && 0 <= ny && ny < 4)) continue;    // 틀림
        if ((nn = space[nx][ny]) == -1) continue;                   // 틀림

        fish new_fishes[17];
        int new_space[4][4];
        copy (fishes, fishes + 17, new_fishes);
        for (int x = 0; x < 4; ++x) {
            copy (space[x], space[x] + 4, new_space[x]);
        }

        ++ctr;
        new_fishes[0] = new_fishes[nn];     // 틀림
        new_fishes[nn].d = -1;              // 틀림

        new_space[x][y] = -1;
        new_space[nx][ny] = 0;

#ifdef DEBUG
        cout << "shark moved." << endl; 
        for (int x = 0; x < 4; ++ x) {
            for (int y = 0; y < 4; ++ y) {
                cout << new_space[x][y] << '\t';
            }
            cout << endl;
        }

        bf (new_fishes, new_space, sum + nn, depth + 1);
#else
        bf (new_fishes, new_space, sum + nn);
#endif
    }

    if (ctr == 0) {
        ans = max(ans, sum);
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    fish fishes[17];
    int space[4][4];

    for (int x = 0; x < 4; ++x) {
        for (int y = 0; y < 4; ++y) {
            int n, d;
            cin >> n >> d;
            space[x][y] = n;
            fishes[n] = {x, y, d % 8};  // 틀림
        }
    }

    // 청소년 상어는 (0, 0)에 있는 물고기를 먹고, (0, 0)에 들어가게 된다. 상어의 방향은 (0, 0)에 있던 물고기의 방향과 같다.
    //// 상어 갱신
    int nn = space[0][0];
    fishes[0] = fishes[nn];
    //// 기존 물고기 갱신
    fishes[nn].d = -1;
    //// space 갱신
    space[0][0] = 0;

    fish new_fishes[17];
    int new_space[4][4];
    copy (fishes, fishes + 17, new_fishes);
    for (int x = 0; x < 4; ++x) {
        copy (space[x], space[x] + 4, new_space[x]);
    }

#ifdef DEBUG
    bf (new_fishes, new_space, nn, 0);
#else
    bf (new_fishes, new_space, nn);
#endif

    cout << ans;

    return 0;
}